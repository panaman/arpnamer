#!/bin/bash

# Arpnamer
#---------------------------------------------------------------
# The MIT License
# Copyright 2017-2018 Michael Pananen

# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#---------------------------------------------------------------

# This script utilizes the arp-scan utility and dig to scan a local subnet and then map reverse lookups to device addresses.
# The logger utility will write the output to local or remote syslog.
# Required packages "arp-scan, bind-utils" for CentOS.
# It can output to a file, local and remote syslog.

# SOURCE GLOBAL CONFIG
source "/etc/arpnamer/version"
source "/etc/arpnamer/arpnamer.conf"
if [ "$interface" == 'default' ]; then
  interface=`ip route | grep default | awk '{print $5}'`;
else
  interface=$interface
fi

# CLEAN TEMP FILES
cleantmp () {
  if [ -f "$arptmp" ]; then
    rm -f $arptmp
  fi
  if [ -f "$outfile" ]; then
    rm -f $outfile
  fi
}

# OUI & IAB FILE GENERATION AND UPDATE
iaboui () {
  ouiagecheck=`find /etc/arpnamer -name oui.txt -type f -mtime +${ieeeage} | wc -l`;
  iabagecheck=`find /etc/arpnamer -name iab.txt -type f -mtime +${ieeeage} | wc -l`;
  if [ ! -f "$ouifile" ] || [ "$ouiagecheck" -gt 0 ]; then
    logger -t arpnamer-system "updating oui database file"
    get-oui -u $ouiurl -f $ouifile
  fi
  if [ ! -f "$iabfile" ] || [ "$iabagecheck" -gt 0 ]; then
    logger -t arpnamer-system "updating iab database file"
    get-oui -u $iaburl -f $iabfile
  fi
}

# LOCAL ARP SCAN
localarpscan () {
  intcount=`echo $int | wc -l`
  if [ -f "$arptmp" ]; then
    rm -f $arptmp
  fi
  if [ "$intcount" -eq 1 ]; then
    arp-scan --localnet --interface=$int --ouifile=$ouifile --iabfile=$iabfile -g -plain >> $arptmp
  fi
}

# ADD DNS NAMES FROM LOOKUP
arpdnsnames () {
  ip=`cat $arptmp | awk '{print $1}'`
  for i in $ip; do
    lookup=`dig +noall +short +time=1 +tries=1 -x $i | sed 's/.$//'`
    if [ -z $lookup ]; then
      name='unknown'
    else
      name=$lookup
    fi
    arpline=`awk "/$i\t/" $arptmp`
    if [ "$codec" == "json" ]; then
      logline=`echo -e "$datenow\t$name\t$arpline"`
    else
      if [ "$delimiter" == 'pipe' ];then
        logline=`echo -e "$name\t$arpline" | sed 's/\t/ | /g'`
      else
        logline=`echo -e "$name\t$arpline"`
      fi
    fi
    echo -e "$logline" >> $outfile
  done
}

# OUTPUT TYPE
outputter () {
  if [ "$codec" == "json" ]; then
    jsonfile="/var/log/arpnamer/arpnamer.json"
    cat $outfile | awk -F'\t' -v fmt="{\"ts\":\"%s\",\"hostname\":\"%s\",\"ip\":\"%s\",\"mac\":\"%s\",\"vendor\":\"%s\"}\n" '{printf fmt, $1, $2, $3, $4, $5}' >> $jsonfile
  else
    if [ "$logoutput" == 'localsyslog' ]; then
      logger -t arpnamer -f $outfile
    elif [ "$logoutput" == 'remotesyslog' ]; then
      if [ "$protocol" == 'tcp' ]; then
        proto="--tcp"
      else
        proto="--udp"
      fi
      if [ ! -z "$loghost" ]; then
        logger -t arpnamer -f $outfile ${proto} --server $loghost --port $logport
      else
        logger -t arpnamer-system "remote syslog host is not configured - remote output cancelled"
      fi
    fi
  fi
}

# Execute Scan
executescan () {
  datenow=$(date +"%FT%T")
  cleantmp
  for int in $interface; do
    iaboui
    localarpscan
    arpdnsnames
    outputter
  done
}

executescan
while sleep $runsec; do
  executescan
done
